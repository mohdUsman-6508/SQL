CREATE DATABASE ORG;
SHOW DATABASES;
SET SQL_SAFE_UPDATES=0;

USE ORG;

CREATE TABLE WORKER(
	WORKER_ID INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    FIRST_NAME CHAR(25),
    LAST_NAME CHAR(25),
    SALARY INT(15),
    JOINING_DATE DATETIME,
    DEPARTMENT CHAR(25)
);

INSERT INTO WORKER
	(WORKER_ID, FIRST_NAME, LAST_NAME, SALARY, JOINING_DATE,DEPARTMENT) 
    VALUES
    (001,'MONIKA','ARORA',100000,'14-02-20 09:00:00', 'HR'),
    (002, 'NISHA', 'KUMAR', 120000, '21-03-21 09:00:00', 'IT'),
    (003, 'RAVI', 'SHARMA', 110000, '12-05-19 09:00:00', 'Finance'),
    (004, 'AKASH', 'VERMA', 95000, '01-10-18 09:00:00', 'Sales'),
    (005, 'PRIYA', 'SINGH', 105000, '15-08-22 09:00:00', 'Marketing'),
    (006, 'VIKAS', 'GUPTA', 98000, '10-06-20 09:00:00', 'HR'),
    (007, 'SHIKHA', 'PATEL', 115000, '05-01-19 09:00:00', 'IT'),
    (008, 'AMAN', 'MEHTA', 102000, '27-09-21 09:00:00', 'Operations');
    


CREATE TABLE BONUS (
	WORKER_REF_ID INT,
    BONUS_AMOUNT INT,
    BONUS_DATE DATETIME,
    FOREIGN KEY (WORKER_REF_ID)
		REFERENCES WORKER(WORKER_ID)
        ON DELETE CASCADE
);


INSERT INTO BONUS
	(WORKER_REF_ID, BONUS_AMOUNT, BONUS_DATE) 
    VALUES
    (001,5000,'16-02-20'),
	(002, 7000, '22-03-21'),
    (003, 6500, '13-05-19'),
    (004, 4800, '02-10-18'),
    (005, 5200, '16-08-22'),
    (006, 4500, '11-06-20');


CREATE TABLE TITLE(
	WORKER_REF_ID INT,
    WORKER_TITLE CHAR(25),
    AFFECTED_FROM DATETIME,
    FOREIGN KEY (WORKER_REF_ID)
		REFERENCES WORKER(WORKER_ID)
        ON DELETE CASCADE
);

INSERT INTO TITLE 
	(WORKER_REF_ID, WORKER_TITLE, AFFECTED_FROM)
	VALUES
    (001,'MANAGER','2016-02-20 00:00:00'),
    (002, 'LEAD DEVELOPER', '2019-03-21 00:00:00'),
    (003, 'FINANCE ANALYST', '2018-05-12 00:00:00'),
    (004, 'SALES EXECUTIVE', '2017-10-01 00:00:00'),
    (005, 'MARKETING HEAD', '2021-08-15 00:00:00'),
    (006, 'HR EXECUTIVE', '2019-06-10 00:00:00'),
    (007, 'IT SUPPORT LEAD', '2017-01-05 00:00:00'),
    (008, 'OPERATIONS MANAGER', '2020-09-26 00:00:00');

SELECT * FROM WORKER;
SELECT * FROM BONUS;
SELECT * FROM TITLE;

-- 50 QUESTIONS TO MANIPULATE THIS DATABASE

-- Q--1. WRITE AN SQL QUERY TO FETCH 'FIRST_NAME" FROM WORKER TABLE USING THE ALIAS NAME AS <WORKER_NAME>

SELECT FIRST_NAME AS WORKER_NAME
	FROM WORKER;
    
-- Q--2 WRITE AN SQL QUERY TO FETCH 'FIRST_NAME" FROM WORKER TABLE IN LOWERCASE LETTER

SELECT LOWER(FIRST_NAME)
	FROM WORKER;


-- Q--3 WRITE AN SQL QUERY TO FETCH 'DISTINCT DEPARTMENT; FROM WORKER TABLE 

SELECT DISTINCT(DEPARTMENT)
	FROM WORKER;

SELECT DEPARTMENT FROM WORKER
	GROUP BY DEPARTMENT;
    
-- Q--4 WRITE AN SQL QUERY TO FETCH FIRST THREE CHARACTERS OF FIRST_NAME FROM WORKER TABLE IN LOWERCASE LETTER

SELECT SUBSTRING(FIRST_NAME, 1,3)
	FROM WORKER;

-- Q--5 WRITE AN SQL QUERY TO FIND THE POSITION OF THE ALPHABET 'I' IN THE FIRST NAME  COLUMN 'MONIKA' FROM WORKER TABLE

SELECT INSTR(FIRST_NAME,'I')
	FROM WORKER
    WHERE FIRST_NAME='MONIKA';
    
SELECT LOCATE('I', FIRST_NAME)
	FROM WORKER
    WHERE FIRST_NAME='MONIKA';

-- Q--6 WRITE AN SQL QUERY TO print the first_name from worker table after removing white spaces from the right side

SELECT LTRIM(FIRST_NAME) FROM WORKER;


-- Q--7 WRITE AN SQL QUERY TO PRINT THE DEPARTMENT FROM WORKER TABLE AFTER REMOVING SPACES FROM LEFT SIDE
SELECT RTRIM(DEPARTMENT) FROM WORKER;


-- Q--8 WRITE AN SQL QUERY TO FETCH THE UNIQUE VALUES OF DEPARTMENT FROM WORKER TABLE AND PRINTS ITS LENGTH

SELECT distinct(LENGTH(DEPARTMENT)), DEPARTMENT FROM WORKER;

-- Q--9 WRITE AN SQL QUERY TO print the first_name from worker table after replacement of 'A with 'a

SELECT REPLACE(FIRST_NAME,'A','a')
	FROM WORKER;
    
-- Q--10 WRITE AN SQL QUERY TO PRINT THE FIRST_NAME AND LAST_NAME INTO A SINGLE COLUMN FROM WORKER TABLE

SELECT CONCAT(FIRST_NAME,' ',LAST_NAME) AS FULL_NAME
	FROM WORKER;
    
-- Q--11 WRITE AN SQL QUERY TO FETCH THE ALL DETAILS  FROM WORKER TABLE IN ASCENDING ORDER , ORDER BY FIRST_NAME

SELECT * FROM WORKER ORDER BY FIRST_NAME ASC; -- BY DEFAULT ASC ORDER

-- Q--12 WRITE AN SQL QUERY TO FETCH THE ALL DETAILS  FROM WORKER TABLE IN ASCENDING ORDER , ORDER BY FIRST_NAME asc, department desc

SELECT * FROM WORKER 
	ORDER BY FIRST_NAME ASC , DEPARTMENT DESC;
    
-- UPDATE WORKER SET FIRST_NAME='AMAN' WHERE FIRST_NAME='AKASH'; DUPLICATE VALUE 

-- Q--13 WRITE AN SQL QUERY TO FETCH THE DETAILS of the worker whose first name is nisha , ravi  FROM WORKER TABLE 

    SELECT * FROM WORKER
		WHERE FIRST_NAME IN('NISHA','RAVI');


-- Q--14 WRITE AN SQL QUERY TO FETCH THE DETAILS of the worker whose first name is not nisha , ravi  FROM WORKER TABLE 

SELECT * FROM WORKER
	WHERE FIRST_NAME NOT IN('NISHA','RAVI');
    
-- Q--15 WRITE AN SQL QUERY TO FETCH THE DETAILS of the worker whose DEPARTMENT NAME AS 'operations*'

SELECT * FROM WORKER
	WHERE DEPARTMENT LIKE 'OPERATIONS%';

-- Q--16 WRITE AN SQL QUERY TO FETCH THE DETAILS of the worker whose first name CONTAINS 'A'

SELECT * FROM WORKER
	WHERE FIRST_NAME LIKE '%A%';

-- Q--17 WRITE AN SQL QUERY TO FETCH THE DETAILS of the worker whosE FIRST NAME ENDS WIHT 'A'

SELECT * FROM WORKER
	WHERE FIRST_NAME LIKE '%A';
    
-- Q--18 WRITE AN SQL QUERY TO FETCH THE DETAILS of the worker whose first name ENDS WITH'A AND HAVE 6 ALPHABET

SELECT * FROM WORKER 
	WHERE FIRST_NAME LIKE '_____A';

-- Q--19 WRITE AN SQL QUERY TO FETCH THE DETAILS of the worker whose WHOSE SALARY LIES BETWEEN 1 LAKH TO 4 LAKH

SELECT * FROM WORKER
	WHERE SALARY BETWEEN 110000 AND 200000;
    
-- Q--20 WRITE AN SQL QUERY TO FETCH THE DETAILS of the worker WHO JOINED IN THE MARCH 2021

SELECT * FROM WORKER 
	WHERE MONTH(JOINING_DATE)=3 AND YEAR(JOINING_DATE)=2021;
    
-- Q--21 WRITE AN SQL QUERY TO COUNT THE NO.OF EMPLOYEE WORKING IN THE DEPARTMENT 'HR'

SELECT COUNT(DEPARTMENT) AS COUNT, DEPARTMENT 
	FROM WORKER 
    GROUP BY DEPARTMENT
	HAVING DEPARTMENT='HR';
    
SELECT COUNT(DEPARTMENT) AS COUNT, DEPARTMENT 
	FROM WORKER 
    WHERE DEPARTMENT='HR';

-- Q--22 WRITE AN SQL QUERY TO GET THE FULL NAME OF THE WORKER WHOSE SALARY IS BETWEEN 90K TO 110K;

select concat(first_name,' ',last_name), salary as fullname
	from worker
    where salary between 90000 and 110000;
    
-- Q--23 WRITE AN SQL QUERY TO COUNT THE NO.OF EMPLOYEE WORKING IN each dePARTMENT in desc order

SELECT COUNT(DEPARTMENT) AS NUMBER_OF_EMPLOYEE, DEPARTMENT
		FROM WORKER 
        GROUP BY DEPARTMENT
        ORDER BY NUMBER_OF_EMPLOYEE DESC;
        
-- BASIC QUESTION FINISHED .
-- JOINS STARTS  
        
-- Q--24 WRITE AN SQL QUERY TO PRINT THE DETAILS OF THE WORKER WHO ARE ALSO MANAGERS

-- SUBQUERY
SELECT * FROM WORKER WHERE WORKER_ID IN(
    (SELECT WORKER_REF_ID FROM TITLE WHERE WORKER_TITLE='MANAGER'));
    
-- JOINS
SELECT W.* FROM WORKER AS W
INNER JOIN 
TITLE AS T ON W.WORKER_ID=T.WORKER_REF_ID 
WHERE T.WORKER_TITLE='MANAGER';

-- Q--25 WRITE AN SQL QUERY TO FETCH THE NUMBER (MORE THAN ONE) OF THE SAME TITLE BUT DIFFERENT DEPARTMENT

SELECT COUNT(WORKER_TITLE) AS COUNT, WORKER_TITLE
	FROM TITLE
    GROUP BY WORKER_TITLE 
    HAVING COUNT>1;

-- Q--26 WRITE AN SQL QUERY TO show only odd rows from the table;

SELECT * FROM WORKER 
	WHERE MOD(WORKER_ID,2)!=0;

SELECT * FROM WORKER 
	WHERE MOD(WORKER_ID,2)<>0;
    
-- Q--27 WRITE AN SQL QUERY TO show only EVEN rows from the table;

SELECT * FROM WORKER
	WHERE WORKER_ID%2=0;
    
SELECT * FROM WORKER
	WHERE MOD(WORKER_ID,2)=0;

-- Q--28 WRITE AN SQL QUERY TO CLONE THE NEW TABLE FROM EXISTING  table;

CREATE TABLE WORKER_CLONE LIKE WORKER;
-- HERE ONLY SCHEMA IS COPIED NOT THE DATA INSIDE IT

INSERT INTO WORKER_CLONE SELECT * FROM WORKER; 

SELECT * FROM WORKER_CLONE;

-- Q--29 WRITE AN SQL QUERY FETCH THE INTERSECTING RECORD OF THE TWO tableS;

SELECT * FROM WORKER AS W
INNER JOIN
BONUS AS B
ON W.WORKER_ID=B.WORKER_REF_ID;

SELECT WORKER.* FROM WORKER
INNER JOIN 
WORKER_CLONE
USING(WORKER_ID);

-- Q--30 WRITE AN SQL QUERY TO SHOW THE DATA OF A TABLE WHICH ANOTHER TABLE DOES NOT CONTAIN
-- LEFT JOIN , RIGHT JOIN

-- MINUS

SELECT * FROM WORKER AS W
LEFT JOIN 
BONUS AS B
ON W.WORKER_ID=B.WORKER_REF_ID
WHERE WORKER_REF_ID IS NULL;


-- Q--31 WRITE AN SQL QUERY TO SHOW THE CURRENT DATE AND TIME

SELECT curdate(), curtime();


-- Q--32 WRITE AN SQL QUERY TO SHOW THE TOP FIVE RECORDS OF THE TABLE ORDER BY SALARY

SELECT * FROM WORKER
	ORDER BY SALARY DESC
    LIMIT 5;

-- Q--33 WRITE AN SQL QUERY TO SHOW THE nth say(5) highest salary;

-- using limit
SELECT * FROM WORKER
	ORDER BY SALARY DESC
    LIMIT 4,1; -- AFTER 4TH SALARY 1ST ONE i.e. 5th highest salary


-- Q--34 WRITE AN SQL QUERY TO SHOW THE nth say(5) highest salary without using limit;
-- corelated subquery (outer query drive inner query)

SELECT * FROM WORKER W1
WHERE 4=(
 SELECT COUNT(DISTINCT(SALARY))
 FROM WORKER W2
 WHERE W2.SALARY>=W1.SALARY
);

-- Q--35 WRITE AN SQL QUERY TO fetch the employees have the same salary;

SELECT W1.* FROM WORKER AS W1 
	CROSS JOIN
	WORKER AS W2
    WHERE W1.WORKER_ID!=W2.WORKER_ID 
		AND W1.SALARY=W2.SALARY;
        
SELECT W1.* FROM WORKER W1, WORKER W2 WHERE W1.SALARY=W2.SALARY AND W1.WORKER_ID != W2.WORKER_ID;

-- Q--36 WRITE AN SQL QUERY TO SHOW THE SECOND HIGHEST SALARY FROM THE TABLE;

-- LIMIT
SELECT SALARY FROM WORKER ORDER BY SALARY DESC LIMIT  1,1;

-- CORELATED SUBQUERY

SELECT SALARY FROM WORKER W1
WHERE 1=(
	SELECT DISTINCT(COUNT(SALARY)) FROM WORKER W2
		WHERE W2.SALARY>W1.SALARY);
	
-- A LIL BIT OF BRAIN 
-- SUBQUERY 
SELECT MAX(SALARY) FROM WORKER
	WHERE SALARY NOT IN (SELECT MAX(SALARY) FROM WORKER);
		
-- Q--37 WRITE AN SQL QUERY TO SHOW ONE ROW TWO TIMES;

SELECT * FROM WORKER
UNION 
SELECT * FROM WORKER;

SELECT * FROM WORKER
UNION ALL
SELECT * FROM WORKER
 ORDER BY WORKER_ID;
 
 
 -- Q--38 WRITE AN SQL QUERY TO LIST ALL THE WORKERS DID NOT GET BONUS
 
SELECT W.* FROM BONUS AS B
RIGHT JOIN
WORKER AS W ON B.WORKER_REF_ID=W.WORKER_ID
WHERE WORKER_REF_ID IS NULL;

SELECT W.* FROM WORKER AS W
LEFT JOIN
BONUS AS B ON W.WORKER_ID=B.WORKER_REF_ID
WHERE WORKER_REF_ID IS NULL;

-- SUBQUERY

WITH BONUS_ID AS (
	SELECT WORKER_REF_ID FROM BONUS
)

SELECT * FROM WORKER 
	WHERE WORKER_ID NOT IN( SELECT * FROM BONUS_ID);
    

 -- Q--39 WRITE AN SQL QUERY TO FETCH THE FIRST 50% RECORD OF THE TABLE
 
 WITH LEN AS (
	 SELECT COUNT(WORKER_ID)/2 FROM WORKER
 )
 
 SELECT * FROM WORKER 
	WHERE WORKER_ID <= (SELECT * FROM LEN);
    
 -- Q--40 WRITE AN SQL QUERY TO FETCH THE department which has less than 2 people;
 
 SELECT  DEPARTMENT, COUNT(DEPARTMENT) AS COUNT
 FROM WORKER
	GROUP BY DEPARTMENT
    HAVING COUNT <2;

 -- Q--41 WRITE AN SQL QUERY TO FETCH THE department and no.of people working in it
 
 SELECT DEPARTMENT, COUNT(DEPARTMENT) AS NO_OF_EMPLOYEE
	FROM WORKER 
    GROUP BY DEPARTMENT;

 -- Q--42 WRITE AN SQL QUERY TO FETCH THE LAST RECORD OF THE TABLE
 
SELECT * FROM WORKER ORDER BY WORKER_ID DESC LIMIT 1;

SELECT * FROM WORKER WHERE WORKER_ID = (SELECT MAX(WORKER_ID) FROM WORKER);



 -- Q--43 WRITE AN SQL QUERY TO FETCH THE FIRST ROW OF THE TABLE
 
 SELECT * FROM WORKER LIMIT 1;
 
 
 -- Q--44 WRITE AN SQL QUERY TO FETCH THE LAST FIVE RECORD FROM THE TABLE
 
 (SELECT * FROM WORKER ORDER BY WORKER_ID DESC LIMIT 5) ORDER BY WORKER_ID;
 
-- Q--45 WRITE AN SQL QUERY TO FETCH THE NAME OF THE WORKER HAVING THE HIGHEST SALARY IN EACH DEPARTMENT

SELECT W1.* FROM WORKER AS W1
INNER JOIN
	(SELECT MAX(SALARY) AS SALARY, DEPARTMENT -- DERIVED TABLE (FROM WORKER SALARY) 
	 FROM WORKER 
	 GROUP BY DEPARTMENT) AS W2
 WHERE W1.SALARY=W2.SALARY 
 AND W1.DEPARTMENT=W2.DEPARTMENT;

-- Q--46 WRITE AN SQL QUERY TO FETCH THE THREE MAX SALARY USING CORELATED SUBQUERY

SELECT * FROM WORKER ORDER BY SALARY DESC LIMIT 3;

SELECT DISTINCT(SALARY) FROM WORKER AS W1
 WHERE (
		SELECT DISTINCT(COUNT(SALARY)) FROM WORKER AS W2
			WHERE W2.SALARY>W1.SALARY)
IN (0,1,2) ORDER BY SALARY DESC;
        
	
SELECT DISTINCT(SALARY) FROM WORKER W1
 WHERE 3>=(
	SELECT COUNT(DISTINCT(SALARY)) FROM WORKER W2
		WHERE W1.SALARY<=W2.SALARY);
		
-- Q--47 WRITE AN SQL QUERY TO FETCH THE THREE MIN SALARY USING CORELATED SUBQUERY

SELECT * FROM WORKER ORDER BY SALARY LIMIT 3;

SELECT DISTINCT(SALARY) FROM WORKER W1 
	WHERE 4<( SELECT COUNT(DISTINCT(SALARY)) FROM
				WORKER W2 WHERE W2.SALARY>W1.SALARY);
			
	
SELECT DISTINCT(SALARY) FROM WORKER W1
 WHERE 3>=(
	SELECT COUNT(DISTINCT(SALARY)) FROM WORKER W2
		WHERE W1.SALARY>=W2.SALARY);


SELECT DISTINCT(SALARY) FROM WORKER AS W1
 WHERE (
		SELECT DISTINCT(COUNT(SALARY)) FROM WORKER AS W2
			WHERE W2.SALARY<W1.SALARY)
IN (0,1,2) ORDER BY SALARY DESC;

-- Q--48 WRITE AN SQL QUERY TO FETCH THE nth MAX SALARY USING CORELATED SUBQUERY

SELECT DISTINCT(SALARY) FROM WORKER ORDER BY SALARY DESC LIMIT 4,1; -- 5TH MAX SALARY

SELECT DISTINCT(SALARY) FROM WORKER W1
	WHERE 5=(
				SELECT COUNT(SALARY) FROM WORKER W2
					WHERE W1.SALARY<W2.SALARY);


-- Q--49 WRITE AN SQL QUERY TO FETCH THE TOTAL SALARY FOR EACH DEPARTMENT;

SELECT SUM(SALARY) AS TOTAL_SALARY_PAID, DEPARTMENT FROM WORKER
	GROUP BY DEPARTMENT ORDER BY TOTAL_SALARY_PAID DESC;
    

-- Q--50 WRITE AN SQL QUERY TO FETCH THE NAME OF EMPLOYEE WITH HIGHEST SALARY IN EACH DEPARTMENT
    
WITH EMPLOYEE_MAX AS (
SELECT MAX(SALARY) AS SALARY, DEPARTMENT FROM WORKER
	GROUP BY DEPARTMENT
)

SELECT W1.* FROM WORKER W1
INNER JOIN EMPLOYEE_MAX E
WHERE W1.SALARY=E.SALARY AND W1.DEPARTMENT=E.DEPARTMENT 
ORDER BY W1.SALARY;

-- Q--50(B) WRITE AN SQL QUERY TO FETCH THE NAME OF EMPLOYEE WITH HIGHEST SALARY
SELECT * FROM WORKER WHERE SALARY=(SELECT MAX(SALARY) FROM WORKER);

-- ---------------------------------------------------------------------------------------------
-- ---------------------------------------------------------------------------------------------

CREATE TABLE NUMBER (
 A INT,
 B INT
);

INSERT INTO NUMBER VALUES
(3,2),
(4,2),
(5,6),
(6,5),
(7,8);


-- USING JOINS REMOVE REVERSED PAIR 
 SELECT N1.* FROM NUMBER N1
 LEFT JOIN
 NUMBER N2 
 ON N1.A=N2.B AND N1.B=N2.A
 WHERE N2.A IS NULL
 OR N1.A<N2.A;


-- USING CORELATED SUBQUERY  

SELECT * FROM NUMBER N1
 WHERE NOT EXISTS ( SELECT * FROM NUMBER N2
					WHERE N1.A=N2.B AND N1.B=N2.A AND N1.A > N2.A)


























    





    

	







    








